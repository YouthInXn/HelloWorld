SSH传输协议和Http传输协议：

  git虽然支持多种传输协议，默认的git:// 使用SSH，但是http协议除了速度慢，且每次推送都必须输入口令
  
  使用SSH传输协议，必须配置SSHkey,否则没有访问权限。

远程仓库

I.本地仓库和gitHub仓库之间的传输是SSH加密的，需要设置SSH Key

1.创建SSH Key

  ssh-keygen -t rsa -C "yuanjia.fan@outlook.com"

2.在User/Administrator/.ssh文件夹中会产生两个文件：

	id_rsa:私钥
	id_rsa.pub：公钥

   注：公钥可以告诉别人 当你的公钥被添加到别人的仓库下，你便可以通过SSH获取别人仓库的内容
	   在账户的setting下添加SSH密钥，复制id_rsa.pub的内容 title随便写
	   这样该SSHkey对应的电脑就有了读写权限。

3.登录GitHub->setting/SSH Setting/add SSH Key

  填写title和id_rsa.pub中的内容

  这样当你向仓库推送内容时，可以识别出是你推送的而不是别人

4.创建远程仓库

  根据提示关联本地仓库

5.这样以后推送就可以使用命令

  git pust origin master 

  来把本地的最新修改推送到gitGub上

II.从远程仓库克隆

1.从零开始的最好方式是先创建远程库，在本地克隆

  git clone 仓库地址

III.使用

1.参与别人的开源项目

  在项目主页点击Fork就将该项目克隆到自己的仓库下，然后本地克隆自己的仓库

  注意：如果你直接克隆别人项目的仓库 git clone 别人项目的url，你将不能推送修改，因为没有权限

  你只能Fork之后克隆自己的仓库到本地，更改之后提交到自己的仓库

  然后 Pull Request,但是别人是否接受就不一定了
  
2.UI界面

  在仓库的命令行模式下执行：
  
	gitk 打开历史修改的UI
  
	git gui 制作提交的UI工具
	
  GitHub客户端：
  
    Windows: https://windows.github.com
	
	Mac: https://mac.github.com
	
3.git常用命令(持续更新)

	工作区和暂存区：
	
		工作区：电脑中的仓库目录
		
		暂存区：工作区的.git文件夹是git的版本库。 版本库中有一个stage的暂存区和一个指向当前版本的HEAD的指针
		
				git add就是把所有修改放到暂存区，git commit是提交暂存区的修改。

	克隆：git clone git@github.com:YouthInXn/HelloWorld
	
	版本回退：git 有一个HEAD指针指向当前版本，通过改变指针位置可以轻松地在各个版本之间来回穿梭
	
		查看版本日志：git log
		
		查看命令日志：git reflog
		
		版本回退：git reset --hard HEAD^   / git reset --hard commit_id
			
			--> HEAD^ 表示上一个版本，HEAD^^表示上上一个版本 通过commit_id可以回退到指定版本
			
		现在总结一下：（拷贝自廖雪峰的官方网站）

		HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

		穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

		要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

	撤销工作区的修改(未提交之前)：git checkout -- file ( -- 很重要，git checkout 是执行切换分支)
	
		分两种情况：1.修改文件之后还未添加到暂存区(git add) 则该命令会执行撤销
		
					2.修改文件之后添加到暂存区，又做了修改，则添加到暂存区之后的状态
	
	撤销暂存区的修改(未提交之前)：git reset HEAD <file>
	
	提交之后就可以使用版本回退的命令
	
	
